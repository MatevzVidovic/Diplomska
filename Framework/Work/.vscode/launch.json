// {
    
//     "version": "0.2.0",
//     "configurations": [
//         {
//             "name": "Python Debugger: Current File",
//             "type": "debugpy",
//             "request": "launch",
//             "program": "${file}",
//             "console": "integratedTerminal",
//             "args": [
//                 "-p",
//                 "scp_copy_0/SegNet_main",
//                 "-m",
//                 "[(1, \"ending_save\"), (80, \"\")]",
//                 "--mn",
//                 "SegNet"
//             ],
//         }
//     ]
// }

// {
//     "name": "Attach to Python Script",
//     "type": "python",
//     "request": "attach",
//     "connect": {
//         "host": "localhost",
//         "port": 5678
//     },
//     "justMyCode": false
// }




// For debugpy import debugging inside of python code:
// This is called remote debugging.

// {
//     // Use IntelliSense to learn about possible attributes.
//     // Hover to view descriptions of existing attributes.
//     // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
//     "version": "0.2.0",
//     "configurations": [
        
//         {
//             "name": "Python Debugger: Remote Attach",
//             "type": "debugpy",
//             "request": "attach",
//             "connect": {
//                 "host": "localhost",
//                 "port": 5678
//             },
//             "pathMappings": [
//                 {
//                     "localRoot": "${workspaceFolder}",
//                     "remoteRoot": "."
//                 }
//             ]
//         }
//     ]
// }


// This just didn't work. 
// But this did: in one vscode window you do the second part (the running of the script) 
// and in another window you do the first part (the attach to process - remote dbugging) 
// !!!!!!!!!!!!!!!! 
// But very interestingly
// When you do remote debugging, when you do Popen, you still get to do breakpoints in the process you just ran.
// I think this might be because here, Popen actually ran a python3 command.
// Because in the second part in isolation, i have subprocess: true, which means it should do the same.
//  But because Popen runs a bash command, I think the debugger doesn't go into that one.

// // Combining the two above

// {
//   "version": "0.2.0",
//   "compounds": [
//     {
//       "name": "Run sysrun + Attach Subprocess",
//       "configurations": [
//         "Python: Debug sysrun",
//         "Python Debugger: Remote Attach"
//       ]
//     }
//   ],
//   "configurations": [
//     {
//       "name": "Python: Debug sysrun",
//       "type": "debugpy",
//       "request": "launch",
//       "module": "sysrun.sysrun",
//       "args": [
//         "zzzzz_runners_simple/sclera/segnet/y_train.py",
//         "--yamls", "model_yamls/sclera_fake.yaml",
//         "hpc_yamls/basic.yaml",
//         "--args", "oth:added_auto_main_args:--mti:2"
//       ],
//       "console": "integratedTerminal",
//       "subProcess": true
//     },
//     {
//       "name": "Python Debugger: Remote Attach",
//       "type": "debugpy",
//       "request": "attach",
//       "connect": {
//         "host": "localhost",
//         "port": 5678 //5677
//       },
//       "pathMappings": [
//         {
//           "localRoot": "${workspaceFolder}",
//           "remoteRoot": "."
//         }
//       ]
//     }
//   ]
// }





{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "Python: Debug sysrun",
      "type": "debugpy",
      "request": "launch",
      "module": "sysrun.sysrun",
      "console": "integratedTerminal",
      "subProcess": true,
      // "python": "/path/to/conda/envs/ipad/bin/python", # or just do conda activate ipad in the integrated terminal beforehand


      
      // "args": [
      //   "zzzzz_runners_simple/sclera/segnet/y_train.py",
      //   "--yamls",
      //   "model_yamls/sclera_fake.yaml",
      //   "hpc_yamls/basic.yaml",
      //   "--args",
      //   "oth:bashpy_args:--mti:2",
      // //   "--test_yaml",
      // //   "sysrun/template_yaml.yaml"
      // ],


      // "args": [
      //   "zzzzz_runners_simple/sclera/segnet/y_prune.py",
      //   "--yamls",
      //   "model_yamls/sclera_fake.yaml",
      //   "hpc_yamls/basic.yaml",
      //   "--args",
      //   "oth:bashpy_args:--sd_path:active_models/segnet_train___zzzzz_runners_simple.sclera.segnet.y_train",
      //   "oth:bashpy_args:--map:2",

      // //   "--test_yaml",
      // //   "sysrun/template_yaml.yaml"
      // ],
      

      

      // "args": [
      //   "zzzzz_runners_simple/sclera/segnet/test/y_test_full_pruning.py",
      //   "--yamls",
      //   "../model_yamls/sclera_fake.yaml",
      //   "../hpc_yamls/basic.yaml",
      //   // "--test_yaml",
      //   // "sysrun/template_yaml.yaml"
      // ],

      // "args": [
      //   "zzzzz_runners_simple/sclera/segnet/test/y_test_main.py",
      //   "--yamls",
      //   "../model_yamls/sclera_fake.yaml",
      //   "../hpc_yamls/basic.yaml",
      //   // "--test_yaml",
      //   // "sysrun/template_yaml.yaml"
      // ],

      // //  needs manual steering, so running it in a terminal is necessary - you write the stdin on the fly
      // // python3 -m sysrun.sysrun zzzzz_runners_simple/sclera/segnet/test/y_test_manual.py --yamls ../model_yamls/sclera_fake.yaml ../hpc_yamls/basic.yaml
      // // // // "args": [
      // // // //   "zzzzz_runners_simple/sclera/segnet/test/y_test_manual.py",
      // // // //   "--yamls",
      // // // //   "../model_yamls/sclera_fake.yaml",
      // // // //   "../hpc_yamls/basic.yaml",
      // // // //   // "--test_yaml",
      // // // //   // "sysrun/template_yaml.yaml"
      // // // // ],

      // "args": [
      //   "zzzzz_runners_simple/sclera/segnet/test/y_test_quick.py",
      //   "--yamls",
      //   "../model_yamls/sclera_fake.yaml",
      //   "../hpc_yamls/basic.yaml",
      //   // "--test_yaml",
      //   // "sysrun/template_yaml.yaml"
      // ],

      // // python3 -m sysrun.sysrun zzzzz_runners_simple/sclera/segnet/test/y_test_uniform.py --yamls ../model_yamls/sclera_fake.yaml ../hpc_yamls/basic.yaml       --test_yaml sysrun/template_yaml.yaml
      // "args": [
      //   "zzzzz_runners_simple/sclera/segnet/test/y_test_uniform.py",
      //   "--yamls",
      //   "../model_yamls/sclera_fake.yaml",
      //   "../hpc_yamls/basic.yaml",
      //   // "--test_yaml",
      //   // "sysrun/template_yaml.yaml"
      // ],








      // "args": [
      //   "zzzzz_runners_simple/sclera/segnet/standalone_scripts/z_get_bs.py",
      //   "--yamls",
      //   "../model_yamls/sclera_fake.yaml",
      //   "../hpc_yamls/basic.yaml",
      //   // "--test_yaml",
      //   // "sysrun/template_yaml.yaml"
      // ],
      

      // "args": [
      //   "zzzzz_runners_simple/sclera/segnet/standalone_scripts/z_get_da.py",
      //   "--yamls",
      //   "../model_yamls/sclera_fake.yaml",
      //   "../hpc_yamls/basic.yaml",
      //   "--args",
      //   "oth:bashpy_args:--sd_path:active_models/segnet_train___zzzzz_runners_simple.sclera.segnet.y_train",
      //   // "--test_yaml",
      //   // "sysrun/template_yaml.yaml"
      // ],


      // "args": [
      //   "zzzzz_runners_simple/sclera/segnet/standalone_scripts/z_get_fw.py",
      //   "--yamls",
      //   "../model_yamls/sclera_fake.yaml",
      //   "../hpc_yamls/basic.yaml",
      //   "--args",
      //   // "oth:bashpy_args:--sd_path:active_models/segnet_train___zzzzz_runners_simple.sclera.segnet.y_train",
      //   "oth:bashpy_args:--sd_path:active_models/segnet_test_quick___zzzzz_runners_simple.sclera.segnet.test.y_test_quick",
      //   // "--test_yaml",
      //   // "sysrun/template_yaml.yaml"
      // ],


      // "args": [
      //   "zzzzz_runners_simple/sclera/segnet/standalone_scripts/z_get_graphs.py",
      //   "--yamls",
      //   "../model_yamls/sclera_fake.yaml",
      //   "../hpc_yamls/basic.yaml",
      // "--args",
      // "oth:bashpy_args:--sd_path:active_models/segnet_train___zzzzz_runners_simple.sclera.segnet.y_train",
      //   // "--test_yaml",
      //   // "sysrun/template_yaml.yaml"
      // ],


      // "args": [
      //   "zzzzz_runners_simple/sclera/segnet/standalone_scripts/z_get_sp.py",
      //   "--yamls",
      //   "../model_yamls/sclera_fake.yaml",
      //   "../hpc_yamls/basic.yaml",
      //   "--args",
      //   "oth:bashpy_args:--sd_path:active_models/segnet_train___zzzzz_runners_simple.sclera.segnet.y_train",
      //   // "--test_yaml",
      //   // "sysrun/template_yaml.yaml"
      // ],

      // // Getting only 2 imgs is correct. We limit the size of the test set in sclera_fake.yaml I think. Or somewhere anyway.
      // "args": [
      //   "zzzzz_runners_simple/sclera/segnet/standalone_scripts/z_get_ts.py",
      //   "--yamls",
      //   "../model_yamls/sclera_fake.yaml",
      //   "../hpc_yamls/basic.yaml",
      // "--args",
      // "oth:bashpy_args:--sd_path:active_models/segnet_train___zzzzz_runners_simple.sclera.segnet.y_train",
      //   // "--test_yaml",
      //   // "sysrun/template_yaml.yaml"
      // ],







      // Unet

      "args": [
        "zzzzz_runners_simple/sclera/unet/test/y_test_quick.py",
        "--yamls",
        "../model_yamls/sclera_fake.yaml",
        "../hpc_yamls/basic.yaml",
        // "--no_run",
        // "--test_yaml",
        // "sysrun/template_yaml.yaml"
      ],











      
    }
  ]
}



